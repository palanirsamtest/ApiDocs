info:
  title: HighBond API Reference
  version: 1.1.0
  description: |

    Welcome to the API documentation for HighBond.

    ## Introduction
    This is the developer interface for the HighBond platform. Use this API to automate interactions with HighBond,
    build reporting, and integrate HighBond with other systems in your company.

    The HighBond API is organized around <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">REST</a> and is built on the
    <a href="https://jsonapi.org/format/" target="_blank">JSON API v1.0 specification</a>.

    > **Warning —**
    This API interacts with your company's live data. It gives you the power to delete important data that your
    company needs. Carefully consider the consequences of your actions when using this API. If you are not sure, contact the
    person or group who administers HighBond in your company.

    ## Authentication
    All requests require authentication. To authenticate, use Launchpad to create a HighBond API (bearer) token for your account. The token is a string that authenticates you
    and allows you to securely access the HighBond API.

    > **Note —**
    You must be a System Admin in at least one HighBond instance to access the API. For help creating a token, see <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=lp-access-tokens"
    target="_blank">Creating and managing tokens</a>.

    Once you have created your token, you can provide it in the header of your request:
    ```
    Authorization: Bearer <TOKEN>
    ```

    <security-definitions />

    ### Complete request example
    A complete request example using `curl` would look like this:
    ```
    curl -H "Authorization: Bearer XYZ" -H "Content-Type: application/vnd.api+json" https://apis-us.highbond.com/v1/orgs/1000559/collections
    ```
    > **Important —**
    If you do not authenticate yourself, the API fails. The API responds to authentication failures with a `401` "Bad credentials" status.


    ### Token security
    HighBond uses the <a href="https://tools.ietf.org/html/rfc6749#section-1.3.1" target="_blank">Authorization Code workflow</a> to generate tokens.

    To enable continuous access to the API, and to provide full ownership and accountability to users, Galvanize does not impose an expiration date
    on the token. You can <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=lp-access-tokens" target="_blank">delete a token in
    Launchpad</a> when you no longer need access to the API.

    > **Important —**
    Your access token provides many privileges, so keep it secure and private. Galvanize recommends that you encrypt your
    machine to securely store the token. Avoid sharing your token in publicly accessible areas such GitHub or within client-side code.


    ### Permissions
    HighBond uses the <a href="https://tools.ietf.org/html/rfc6749" target="_blank">OAuth 2.0 authorization framework</a> to control access to the API.

    API tokens are tied to users, not companies, so your permissions in the API are the same as your permissions in HighBond. If you leave your
    company and your HighBond user account is deleted, your application will break. Consider the long-term requirements of your application. You
    may wish to create a system account in HighBond and build your application from that, but verify that your company's security policies permit
    accounts that aren't tied to particular people.


    ### Apps
    Apps are components in HighBond that provide specific functionality. You can use this API to interact with data in the apps you have access to.

    The apps available to you depend on the edition of HighBond (standard or premium) in use, and whether or not your company has purchased any add-on apps.
    For more information, see <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=lp-product-editions" target="_blank">Products and editions</a>.


    ## Making requests
    All API requests must be made over <a href="https://en.wikipedia.org/wiki/HTTPS" target="_blank">HTTPS</a>. Calls over HTTP respond with the `301` "Moved Permanently" status.


    ### HTTP methods
    The API uses the appropriate HTTP method for each action:
    * `GET` — used for retrieving resources
    * `POST` — used for creating resources
    * `PUT` / `PATCH` — used for updating resources
    * `DELETE` — used for deleting resources


    ### Content type
    Always specify the `Content-Type` of your request in the header. Supported content types are:
    * JSON API
    * JSON (for backwards compatibility)

    ```
    Content-Type: application/vnd.api+json
    Content-Type: application/json
    ```

    A complete **Get a table** request using `curl` would look like this:
    ```
    curl -H "Authorization: Bearer XYZ" -H "Content-Type: application/vnd.api+json" https://apis-us.highbond.com/v1/orgs/11594/tables/388930
    ```

    ### API regions

    The HighBond service is provided from different regions in order to give customers options for where their data is stored, and to enable them to
    comply with data privacy location requirements.

    Your request URL must include one of the following region codes, based on where your HighBond instance resides:

    * **United States** — `https://apis-us.highbond.com`
    * **Canada** — `https://apis-ca.highbond.com`
    * **Europe** — `https://apis-eu.highbond.com`
    * **Asia** — `https://apis-ap.highbond.com`
    * **Australia** — `https://apis-au.highbond.com`
    * **Africa** — `https://apis-af.highbond.com`
    * **South America** — `https://apis-sa.highbond.com`

    Additionally, for government clients, there are two government "regions":
    * **Gov** (US federal) — `https://apis.highbond-gov.com`
    * **SLED** (state, local, and education; non-federal) — `https://apis.highbond-gov2.com`


    ### HighBond instance and resource IDs
    Requests require a HighBond instance ID and the ID of the resource you are interacting with. These IDs are numeric keys that uniquely
    identify the HighBond instance and every resource in that instance.

    The easiest way to get your HighBond instance ID is to log in to HighBond and take the ID from the URL:
    ```
    https://accounts.highbond.com/orgs/12345
    ```

    To obtain IDs for resources like collections, analyses, tables, and robots, you can navigate to the item you want to reference, and take the IDs from the URL.
    For example, this URL shows a collection ID:
    ```
    https://example-company.results.highbond.com/projects/55843
    ```

    > **Tip —**
    The `GET` methods in this API also return IDs that you can use to identify resources you can act on.


    ### Users
    A unique identifier (UID) is an alphanumeric string that is associated with a user in HighBond. UIDs make it possible to address users,
    so that they can be accessed and interacted with using the API. Some requests that allow you to assign items to users, such as creating an objective,
    require you to specify a user's UID.

    To obtain a user's UID:

    1. Sign in to <a href="https://accounts.highbond.com/login" target="_blank">HighBond</a>.
    2. If your company uses more than one instance in HighBond, make sure <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=lp-switch-instances"
    target="_blank">the appropriate instance is active</a>.
    3. Select **Options > Users (#)**.
    4. Navigate to the appropriate user and click the user's name.
    5. In the **User Details** side panel, copy the UID to your clipboard.
    Once you have copied the UID, you can specify it in your request.


    ### Requesting the API to return only specific fields
    For certain resources, such as control tests, you can request the API to return only specific fields using the `fields` query parameter. Sparse fieldsets are
    helpful for limiting your responses to only the data you require.

    > **Note —**
    The `type` argument must specify the resource you want to retrieve. The value of the `fields` parameter must be a comma-delimited list that specifies
    the name of the field(s) to be returned. Avoid whitespaces before or after each comma.
    ```
    fields[type]=field_name1,field_name2,fieldname3
    ```

    A complete **Get a control test** request that only returns the `assigned_user`, `control`, and `testing_round_number` fields would look like this:

    ```
    curl -H "Authorization: Bearer XYZ" -H "Content-Type: application/vnd.api+json" https://apis-us.highbond.com/v1/orgs/12345/control_tests/105?fields[control_tests]=assigned_user,control,testing_round_number
    ```

    ### Requesting the API to return related resources
    To reduce the number of requests, you may use the `include` query parameter to return related resources in the response along with the requested primary resources. Such responses are called "compound documents".

    Accepted values for the `include` parameter are documented in the `Query Parameters` section of each API method.

    > **Note —**
    The `include` parameter must be a comma-delimited list that specifies
    the name of the relationship(s) or nested relationship(s) to be returned. Avoid whitespaces before or after each comma.

    Example - requesting a relationship and a nested relationship
    ```
    include=control,control.objective
    ```

    A complete **Get a control test** request that returns the `control` relationship, and `control.objective` nested relationship would look like this:

    ```
    curl -H "Authorization: Bearer XYZ" -H "Content-Type: application/vnd.api+json" https://apis.highbond.com/v1/orgs/12345/control_tests/105?include=control,control.objective
    ```

    ### Blank fields
    Blank fields are included in all response schemas as `""` or `null` instead of being omitted.


    ### Time zones
    All timestamps are returned in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.

    Some requests that create new data, such as creating a robot task's schedule, allow you to provide time zone information.
    For API requests that allow for a timestamp to be specified, you must explicitly provide an ISO 8601 timestamp with time zone information.

    ```
    "starts_at": "2019-03-21T16:25:00.478Z",
    "starts_at_timezone": "America/Los_Angeles",
    ```


    ### Rich text fields

    Some requests and responses contain rich text fields that include HTML tags. These are typically description fields. If you need to format text,
    the best approach is to upload your raw data first and apply formatting later in the user interface.

    > **Note —**
    Images that exist in rich text fields are returned in responses, but they are not rendered. You cannot upload new images to rich text fields using the API.


    ### Rate limitations
    The API safeguards against bursts of usage to help maximize its stability. You cannot make more than 6 requests per second. Treat this limit as a maximum and avoid making unnecessary requests to the API.

    If you make too many requests, the API responds with a `429` "Too many requests" status.


    ## Errors
    HighBond uses standard <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank">HTTP response codes</a>
    to indicate the success or failure of a request.

    Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error given the information provided. Codes in the `5xx`
    range indicate that the server has failed to fulfill a valid request.

    Some common errors that occur when making requests include:
    * **`400` Bad request —** When a parameter is missing (such as the `org_id` or resource `id`), when more
    than one unique resource is specified in the request, or when a specified data type is incompatible with the endpoint
    * **`401` Bad credentials —** When there is an authentication error
    * **`403` Forbidden —** When there is an authorization problem based on your <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=lp-managing-apps"
    target="_blank">role in a HighBond app</a> or <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=lp-assigning-subscriptions" target="_blank">subscription</a>
    * **`404` Not found —** When there is a problem on the client side due to an incorrect URL or resource deletion
    * **`415` Unsupported media type —** When the `Content-Type` specified is unsupported
    * **`422` Unprocessable entity —** When a required attribute is missing (such as the name of a resource), or when a conflict occurs
    (such as a script activation conflict)


    ## Versioning
    All API endpoints use a version number in the path. As can be seen in the examples, `/v1/` specifies version 1 of the API.

    Over time, the API will evolve. New API versions will be introduced and existing versions may be updated.

    Some API updates are considered a breaking change, requiring a new version of the API to be introduced. An example of a breaking
    change is fields being changed or removed. By introducing a new version, API consumers can safely continue to use prior API versions.

    The other type of API update is a non-breaking change. You should expect non-breaking change updates to existing API versions.
    An example of a non-breaking change is adding a field to a response object. Non-breaking changes are additive. While they do
    change the response body, they should not impact the API consumer.

  x-logo:
    url: ./assets/logo.png
    altText: HighBond Logo

#
# Tags allow the grouping of API operations (paths). This is important for documentation generation
# and SDK generation.
#
# Modifying the value for the name property will break the SDK (software development kit), but you can freely modify the value of the x-displayName property.
#
tags:
  toolkits:
    name: Toolkits
    description: |
      A toolkit is a curated set of tools aimed at addressing one area of risk or compliance. For example, a toolkit might include a set of data analytics, a risk control framework, and a best practices program.

      <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=managing-toolkits" target="_blank">Learn more about toolkits</a>.

  template_toolkits:
    name: Template Toolkits
    description: |
      A template toolkit is a curated set of tools aimed at addressing one area of risk or compliance. For example, a toolkit might include a set of data analytics, a risk control framework, and a best practices program.

      <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=managing-toolkits" target="_blank">Learn more about toolkits</a>.
  asset_types:
    name: Asset types
    description: |
      All assets are instances of an asset type. The asset type is a class that defines the format and behavior of its assets: what attributes they have, what workflow they move through during their life-cycles, and who can see them and work on them. The exact behavior of each asset type is determined by its relationship to a workflow, record types, attribute types, and roles.

      <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=pm-configure-asset-types" target="_blank">Learn more</a>.
  asset_record_types:
    name: Asset record types
    description: |
      All asset records are instances of an asset record type. The asset record type is a class, which defines the pieces of data its asset records should have and how they should behave: what attributes they have, what workflow they move through during their life-cycles, and who can see them and work on them. The exact behavior of each asset record type is determined by its relationship to a workflow, asset types, other asset record types, attribute types, and roles.

      In many ways, an asset record type is to an asset record what an asset type is to an asset. However, asset record types are unique because they can also be related to other asset record types. This allows you to create hierarchies of asset record types and, in turn, hierarchies of asset records in your assets. These "child" asset record types are not functionally different from other record types, but they appear within another asset record instead of the asset.

      <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=ai-records" target="_blank">Learn more</a>.
  attribute_types:
    name: Attribute types
    description: |
      A configurable object that captures data responses. Can be associated with Asset Types and Asset Record Types
  assets:
    name: Assets
    description: |
      Assets represent things that are of value to your organization. Assets can be tangible, like laptops, servers, and software, or they can be intangible, like third-party business relationships, intellectual property, and policies. By tracking your organization's assets, you protect your organization from fraud, theft, compliance issues, and unacceptable risk.

      <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=pm-configure-asset-types" target="_blank">Learn more</a>.
  asset_relationships:
    name: Asset Relationships
    description: |
      Asset relationships are user-created, ad hoc relationships between an asset and either another asset or an asset record.

      These relationships can be directional, where the related objects have different labels (e.g., one says "impacts" and the other says "impacted by"), or they can be parallel (e.g., both say "connected to").
  asset_records:
    name: Asset Records
    description: |
      Asset records are how you capture and document tasks, events, and items in the context of an asset. An asset record could be an incident like a server outage, a contract for a third party, a security gap and corresponding remediation plan, or anything else relevant to an asset.

      In many ways, an asset record is similar to an asset: you fill in attributes for both, and you take both through your risk mitigation workflows. However, you do not have to assess the risks associated with asset records. As well, unlike assets, asset records can be nested in other asset records if your asset record types are configured that way.

      <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=ai-records" target="_blank">Learn more</a>.
  asset_record_relationships:
    name: Asset Record Relationships
    description: |
      Asset record relationships are user-created, ad hoc relationships between an asset record and either another asset record or an asset.

      These relationships can be directional, where the related objects have different labels (e.g., one says "impacts" and the other says "impacted by"), or they can be parallel (e.g., both say "connected to").
  users:
    name: Users
    description: |
      A user represents a member of HighBond. Users can belong to multiple instances.

      <a href="https://help.highbond.com/helpdocs/highbond/en-us/Default.htm#cshid=lp-adding-users" target="_blank">Learn more about adding and managing users</a>.

#
# Note: requestBodies component is not used because JSON API spec does not lend itself
#       well to re-usable request bodies. Might as well remove the component section for it.
#       However, if re-usable bodies emerge, this can be updated to reference it.
#
components:
  schemas:
    $ref: ./schemas.yml
  responses:
    $ref: ./responses.yml
  parameters:
    $ref: ./parameters.yml
