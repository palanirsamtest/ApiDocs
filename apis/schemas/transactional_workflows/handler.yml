HandlerBaseAttributes: &HandlerBaseAttributes
  name:
    type: string
    description: The name of the handler.
    example: My first Handler
  description:
    type: string
    description: The description of the handler.
    example: Description of My first Handler
  shared:
    type: boolean
    description: Handlers can be marked as "shared". Only shared handlers can be reused across multiple events in different workflows.
    default: false
    example: false

HandlerMetadataAttributes: &HandlerMetadataAttributes
  type: object
  description: The attributes associated with the resource.
  properties: &metadataAttributes
    <<: *HandlerBaseAttributes
    created_at:
      type: string
      description: The date the handler was created.
      example: '2019-02-09T13:17:26Z'
      format: date-time
    updated_at:
      type: string
      description: The date the handler was updated.
      example: '2019-03-18T22:02:05Z'
      format: date-time

HandlerUpdateAttributes: &HandlerUpdateAttributes
  <<: *HandlerBaseAttributes
  condition_conjunction:
    type: string
    description: Type of conditions
    example: allOf
    default: allOf
    enum:
      - allOf
      - anyOf
  conditions:
    type: array
    description: An array of conditions
    items:
      type: object
      properties:
        name:
          type: string
          description: The name of the handler condition
          example: My first handler condition
        condition_type:
          type: string
          description: Determines whether all attributes associated with an asset or record must have values to advance to the next workflow status, or if only the specified attributes are required.
          enum:
            - allRequiredFieldsAreProvided
            - specificFieldsAreRequired
        configuration:
          type: object
          description: If the condition_type is `allRequiredFieldsAreProvided`, all attributes in that list are checked. If the condition_type is `specificFieldsAreRequired`, the configuration includes the list of attributes that need to be checked.
          properties:
            field_names:
              type: array
              description: |
                If the condition_type is `allRequiredFieldsAreProvided`, this is the list of attributes the system checks to determine whether the workflow can advance. For each attribute in this list, the system checks the `is_required` property. If it is set to `true`, the workflow will only advance if that attribute has a value.
              items:
                type: string
        scopes:
          type: array
          default: ['self']
          items:
            type: string
            enum:
              - self
        on_failure_action:
          type: string
          enum:
            - stopAllHandlersForThisEvent
            - stopThisHandlerForTheCurrentItem
        on_failure_display_message:
          type: boolean
          default: false
        on_failure_message:
          type: string
          description: |
            For `on_failure_display_message = true`, `on_failure_message` is required.
    example:
      [
        {
          'condition_type': 'specificFieldsAreRequired',
          'configuration': { 'field_names': ['reviewSummary', 'reviewer'] },
          'scopes': ['self'],
          'on_failure_action': 'stopAllHandlersForThisEvent',
          'on_failure_display_message': false,
        },
      ]
  actions:
    type: array
    description: An array of actions
    items:
      type: object
      properties:
        name:
          type: string
          description: The name of the handler action
          example: My first handler action
        action_type:
          type: string
          enum:
            - notify
            - transitionStatus
            - runRobot
            - sendQuestionnaire
        configuration:
          type: object
          description: Each action type requires its own set of configurations.
          properties:
            status_id:
              type: string
              description: |
                The ID of the Workflow Status to transition an Item to by this Handler Action.

                Required by the `transitionStatus` action_type
            emails:
              type: array
              description: |
                The list of email addresses that the email notification will be sent to.

                Required by the `notify` action_type.
              items:
                type: string
            email_body:
              type: string
              description: |
                The email body of the email notification.

                Required by the `notify` action_type.
            email_subject:
              type: string
              description: |
                The email subject of the email notification.

                Required by the `notify` action_type.
            task_id:
              type: string
              description: |
                The Id of the Workflow Robot task to run.

                Required by the `runRobot` action_type.
            allowed_questionnaire_ids:
              type: array
              description: |
                The list of allowed questionnaires.

                Required by the `sendQuestionnaire` action_type.
              items:
                type: string
            questionnaire_context_fields:
              type: array
              maxItems: 15
              description: |
                A list of field names that the display name and value will be shown up in questionnaire responding page.

                Optional for the `sendQuestionnaire` action_type.
              items:
                type: string
        scopes:
          type: array
          default: ['self']
          items:
            type: string
            enum:
              - self
    example:
      [
        {
          'action_type': 'transitionStatus',
          'configuration': { 'status_id': '317dc769-3e09-4501-a2fd-80908bea7a66' },
          'scopes': ['self'],
        },
        {
          'action_type': 'notify',
          'configuration':
            {
              'emails': ['example@example.com'],
              'email_body': 'Example email body',
              'email_subject': 'Example email subject',
            },
          'scopes': ['self'],
        },
        { 'action_type': 'runRobot', 'configuration': { 'task_id': '123' }, 'scopes': ['self'] },
        {
          'action_type': 'sendQuestionnaire',
          'configuration':
            {
              'allowed_questionnaire_ids': ['123'],
              'questionnaire_context_fields': ['name', 'assetTypeId', 'createdAt'],
            },
          'scopes': ['self'],
        },
      ]
  triggers:
    type: array
    description: An array of triggers
    items:
      type: object
      properties:
        trigger_type:
          type: string
          description: The trigger type of the handler. Only one instance of a given triggerType is allowed in the triggers array.
          enum:
            - fieldUpdated
            - questionnaireResponded
        configuration:
          type: object
          description: Each trigger type requires its own set of configurations.
          properties:
            field_names:
              type: array
              description: |
                The field names of an attribute that, when updated, will trigger the handler. Required by the `fieldUpdated` trigger_type.
              items:
                type: string
            questionnaire_ids:
              type: array
              description: |
                The questionnaire ids that trigger the handler. Required by the `questionnaireResponded` trigger_type.
              items:
                type: string
            trigger_conjunction:
              type: string
              description: |
                The conjunction used when performing the trigger check. Required by the `fieldUpdated` trigger_type, which supports both `anyOf` and `allOf`. For other trigger types, `anyOf` is implicitly used.
              enum:
                - anyOf
                - allOf
    example:
      [
        {
          'trigger_type': 'fieldUpdated',
          'configuration': { 'field_names': ['risk_score', 'risk_appetite'], 'trigger_conjunction': 'allOf' },
        },
      ]

HandlerFullAttributes: &HandlerFullAttributes
  type: object
  description: The attributes associated with the resource.
  properties: &HandlerFullAttributeProperties
    <<: *HandlerUpdateAttributes
    <<: *metadataAttributes

Handler: &Handler
  type: object
  description: The data associated with the resource.
  required:
    - id
    - type
    - attributes
  properties:
    id:
      type: string
      description: The ID of the handler.
      example: 415dc769-3e49-4501-a2fd-80908bea7a32
    type:
      type: string
      description: The classification of the object (`"handlers"`).
      example: handlers
    attributes: *HandlerFullAttributes

HandlerMetadata: &HandlerMetadata
  type: object
  description: The data associated with the resource.
  required:
    - id
    - type
    - attributes
  properties:
    id:
      type: string
      description: The ID of the handler.
      example: 415dc769-3e49-4501-a2fd-80908bea7a32
    type:
      type: string
      description: The classification of the object (`"handlers"`).
      example: handlers
    attributes: *HandlerMetadataAttributes

HandlerIncluded: &HandlerIncluded
  type: array
  description: The related entities included with the resource.
  items:
    type: object
    description: The data associated with the resource.
    properties:
      id:
        type: string
        description: The ID of the included entity.
        example: 415dc769-3e49-4501-a2fd-80908bea7a32
      type:
        type: string
        description: The classification of the object (`"events"`).
        example: events
      attributes:
        $ref: '../../components/schemas.yml#/EventPlainJsonWithoutId'

HandlerEventRelationshipItems: &HandlerEventRelationshipItems
  type: object
  description: The data associated with the resource.
  required:
    - id
    - type
  properties:
    id:
      type: string
      description: The ID of the event.
      example: 415dc769-3e49-4501-a2fd-80908bea7a32
    type:
      type: string
      description: The classification of the object (`"events"`).
      example: events
    meta:
      type: object
      description: The metadata for the handler<->event relationship
      properties:
        scopes:
          type: array
          description: The relationship of the event to the scope of the handler
          items:
            type: string
          example: ['self']
        position:
          type: integer
          format: int64
          description: The order in which the event will be executed when a handler is invoked
          example: 1

HandlerEventRelationshipResponse: &HandlerEventRelationshipResponse
  events:
    type: object
    description: The data associated with the resource.
    required:
      - data
    properties:
      data:
        type: array
        items: *HandlerEventRelationshipItems
        example:
          - id: 415dc769-3e49-4501-a2fd-80908bea7a32
            type: events
            meta: { scopes: ['self'], position: 1 }

HandlerRelationshipsResponse: &HandlerRelationshipsResponse
  type: object
  description: The relationships associated with the resource.
  properties:
    <<: *HandlerEventRelationshipResponse

CreateHandlerPayload:
  type: object
  description: The data associated with the resource.
  required:
    - data
  properties:
    data:
      type: object
      description: The data associated with the resource.
      required:
        - type
        - attributes
      properties:
        type:
          type: string
          description: The classification of the object (`"handlers"`).
          example: handlers
        attributes:
          type: object
          description: The attributes associated with the resource.
          required:
            - name
          properties:
            <<: *HandlerUpdateAttributes

UpdateHandlerPayload:
  type: object
  description: The data associated with the resource.
  required:
    - data
  properties:
    data:
      type: object
      description: The data associated with the resource.
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          description: The ID of the handler.
          example: '768cd1bc-d8af-4429-9aa0-8a4b477de42b'
        type:
          type: string
          description: The classification of the object (`"handlers"`).
          example: handlers
        attributes:
          type: object
          description: The attributes associated with the resource.
          properties:
            <<: *HandlerUpdateAttributes

SingleHandlerResponse:
  type: object
  description: The data associated with the resource.
  required:
    - data
  properties:
    data: *Handler

SingleHandlerWithEventsResponse:
  type: object
  description: The data associated with the resource.
  required:
    - data
  properties:
    data:
      type: object
      description: The data associated with the resource.
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          description: The ID of the handler.
          example: e5079e91-3aed-40f0-b3d1-96b83a0bc159
        type:
          type: string
          description: The classification of the object (`"handlers"`).
          example: handlers
        attributes:
          type: object
          description: The attributes associated with the resource.
          properties:
            <<: *HandlerFullAttributeProperties
        relationships: *HandlerRelationshipsResponse
    included: *HandlerIncluded

# This captures the ID as well as all attributes in a same JSON blob,
# hence the name "plain json".
HandlerPlainJson:
  type: object
  description: The plain JSON representation of a Handler.
  properties:
    id:
      type: string
      description: The ID of the handler.
      example: 415dc769-3e49-4501-a2fd-80908bea7a32
    <<: *HandlerFullAttributeProperties

MultipleHandlersResponse:
  type: object
  description: The data associated with the resource.
  required:
    - data
  properties:
    data:
      type: array
      description: The data associated with the resource.
      items: *HandlerMetadata
